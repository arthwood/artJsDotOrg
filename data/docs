ajax:
  name: Ajax
  package: artjs.net
  description: Facilitates AJAX requests
  sections:
    -
      name: Constructor
      members:
        -
          header: Ajax(url:String, data:Object, method:String)
          params:
            url: request URL
            data: request data
            method: request method
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.onSuccess.add(new Delegate(this, this.onAjaxSuccess));"
            -
            - "ajax.request();"
    -
      name: Events
      members:
        -
          header: onFailure(ajax:Ajax)
          description: Dispatched after request failed
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.onFailure.add(new Delegate(null, onAjaxFailure));"
            -
            - "function onAjaxFailure(ajax) {"
            - "  console.log('failure...');"
            - "}"
            -
            - "ajax.request();"
          header: onSuccess(ajax:Ajax)
          description: Dispatched after successful response
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.onSuccess.add(new Delegate(null, onAjaxSuccess));"
            -
            - "function onAjaxSuccess(ajax)"
            - "  console.log('success!');"
            - "}"
            -
            - "ajax.request();"
    -
      name: Properties
      members:
        -
          header: data:Object
          description: The same property as in constructor
        -
          header: method:String
          description: The same property as in constructor
        -
          header: requestData:Object
          description: Data that is actually send to server
        -
          header: requestMethod:String
          description: Method that is actually used for request
        -
          header: requestQueryData:String
          description: Request data transformed to a String (this is what is actually send to server)
        -
          header: url:String
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: abort():Void
          description: Aborts request
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.request();"
            -
            - "// ... at some point during the request"
            - "ajax.abort();"
        -
          header: getAllRequestHeaders():String
          description: Returns all request headers
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            - 
            - "ajax.getAllRequestHeaders();"
        -
          header: getReadyState():Number
          description: Returns request ready state
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.request();"
            -
            - "// ... at some point during request"
            - "ajax.getReadyState();"
        -
          header: getRequestHeader(header:String):String
          description: Returns request header
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.getRequestHeader('Accept');"
        -
          header: getResponseText():String
          description: Returns response text
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.onSuccess.add(new Delegate(null, onAjaxSuccess));"
            -
            - "function onAjaxSuccess(ajax) {"
            - "  console.log(ajax.getResponseText());"
            - "}"
            -
            - "ajax.request();"
        -
          header: getStatus():Number
          description: Returns request status
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.request();"
            -
            - "// ... at some point during request"
            - "ajax.getStatus();"
        -
          header: getStatusText():String
          description: Returns request status text
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.request();"
            -
            - "// ... at some point during request"
            - "ajax.getStatusText();"
        -
          header: request():Void
          description: Performs request
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.onSuccess.add(new Delegate(this, this.onAjaxSuccess));"
            -
            - "ajax.request();"
        -
          header: setRequestHeader(header:String, value:String):Void
          description: Sets request header
          example:
            - "var ajax = new Ajax('/users', {only_active: 1}, artjs.Ajax.Methods.GET);"
            -
            - "ajax.setRequestHeader('X-My-Header', 'hello');"
    -
      name: Static properties
      members:
        -
          header: Methods.DELETE
          description: DELETE method name ('DELETE')
        -
          header: Methods.GET
          description: GET method name ('GET')
        -
          header: Methods.POST
          description: POST method name ('POST')
        -
          header: Methods.PUT
          description: PUT method name ('PUT')
        -
          header: ReadyState.LOADED
          description: LOADED ready state (4)
        -
          header: ReadyState.OPEN
          description: OPEN ready state (1)
        -
          header: ReadyState.RECEIVING
          description: RECEIVING ready state (3)
        -
          header: ReadyState.SENT
          description: SENT ready state (2)
        -
          header: ReadyState.UNINITIALIZED
          description: UNINITIALIZED ready state (0)
    -
      name: Static methods
      members:
        -
          header: del(url:String, data:Object, onSuccess:Delegate)
          description: Performs DELETE request
          example:
            - "var ajax = Ajax.del('/users/3', {name: 'Michael'}, new Delegate(this, this.onAjaxSuccess));"
        -
          header: get(url:String, data:Object, onSuccess:Delegate)
          description: Performs GET request
          example:
            - "var ajax = Ajax.get('/users', {only_active: 1}, new Delegate(this, this.onAjaxSuccess));"
        -
          header: post(url:String, data:Object, onSuccess:Delegate),
          description: Performs POST request,
          example:
            - "var ajax = Ajax.post('/users', {name: 'Michael'}, new Delegate(this, this.onAjaxSuccess));"
        -
          header: put(url:String, data:Object, onSuccess:Delegate)
          description: Performs PUT request
          example:
            - "var ajax = Ajax.put('/users/3', {name: 'Michael'}, new Delegate(this, this.onAjaxSuccess));"
array:
  name: artjs.Array
  package: artjs.utils
  description: 
    Provides set of methods that operates on any Array instance.
  sections:
     -
      name: Static methods
      members:
        -
          header: build(n:Integer, func:Function):Array
          description: Creates a new array with n items using func as factory. func receives index as the only parameter.
          example:
            - "var array = artjs.Array.build(4, function(i) return i * i; });"
        -       
          header: first():Object
          description: Returns first element of the array.
        -
          header: second():Object
          description: Returns second element of the array.
        -
          header: third():Object
          description: Returns third element of the array.
        -
          header: last():Object
          description: Returns last element of the array.
        -
          header: beforeLast():Object
          description: Returns last but one element of the array.
        -
          header: getItemAt(i:Integer):Object
          description: Returns element on i-th position in the array.
        -
          header: includes(i:*):Boolean
          description: Returns true if element exists in the array; false otherwise.
        -
          header: includesAll(subset:Array):Boolean
          description: Returns true if all items in subet exist in the array.
        -
          header: insertAt(index:Integer, insertion:Array):Void
          description: Inserts insertion array at index posion.
        -
          header: removeAt(index:Integer):Void
          description: Removes element on index position.
        -
          header: removeItem(i:*, onlyFirst:Boolean = false):Void
          description: Removes all occurences of i from the array or only first if second argument is true.
        -
          header: arrify(index:Integer = 0):Array
          description: Converts enumerable to array starting from index. Useful for "arguments" object conversion.
        -
          header: map(f:Function, context:Object = null):Array
          description: Maps an array using f iterator. Use context to set this reference inside the iterator
        -
          header: invoke(method:String, args:Array = []):Array
          description: Calls method on every item while passing args as an argument list. Returns array of results.
        -
          header: pluck(property:String):Array
          description: Maps every item to its property value.
        -
          header: each(f:Function, context:Object = null):Void
          description: 
            - Calls f for every item. Use context to set this reference inside the callback. 
            - Callback receives item, index and array as a list of arguments.
        -
          header: eachItem(f:Function, context:Object = null):Void
          description: Same as each but does not pass index to the callback.
        -
          header: eachIndex(f:Function, context:Object = null):Void
          description: Same as each but does not pass item to the callback.
        -
          header: inject(init:Object, f:Function, context:Object = null):Object
          description: 
            Builds an object from array using f as an iterator. Use context to set this reference inside the iterator. Iterator receives result, item, index and array as a list of arguments. You can either update result object inside iterator or return the value which will update the result.
        -
          header: flatten():Array
          description: Converts multidimentional array to 1-dim Array. Currently it flattens only 1 level deep.
        -
          header: select(f:Function, context:Object = null):Array
          description: 
            Filters the array leaving only elements for which iterator f returns true. Use context to set this reference inside the iterator. Iterator receives item, index and array as a list of arguments. Returns new array without affecting the subject.
        -
          header: $select(f:Function, context:Object = null):Void
          description: 
            Filters the array by leaving elements for which iterator f returns true. Use context to set this reference inside the iterator. Iterator receives item, index and array as a list of arguments. This method affects the subject.
        -
          header: reject(f:Function, context:Object = null):Array
          description: 
            Filters the array removing elements for which iterator f returns true. Use context to set this reference inside the iterator. Iterator receives item, index and array as a list of arguments. Returns new array without affecting the subject.
        -
          header: $reject(f:Function, context:Object = null):Void
          description: 
            Filters the array by removing elements for which iterator f returns true. Use context to set this reference inside the iterator. Iterator receives item, index and array as a list of arguments. This method affects the subject.
        -
          header: detect(f:Function, context:Object = null):Object
          description: 
            Returns first element for which iterator f returns true. Use context to set this reference inside the iterator. Iterator receives item, index and array as a list of arguments.
        -
          header: equal(f:Function, context:Object = null):Boolean
          description: 
            Returns true if all arrays in subject have the same items. You can optionally pass f iterator to define equality criteria. See #uniq for more information. Use context to set this reference inside the iterator.
        -
          header: areItemsEqual(f:Function, context:Object = null):Boolean
          description: 
            Returns true if all items are equal. You can optionally pass f iterator to define equality criteria. See #uniq for more information. Use context to set this reference inside the iterator.
        -
          header: transpose():Array
          description: 
            Returns new Array with switched rows and columns.
        -
          header: all(f:Function, context:Object = null):Boolean
          description: 
            Returns true if iterartor f returns true for all items. Use context to set this reference inside the iterator.
        -
          header: any(f:Function, context:Object = null):Boolean
          description: 
            Returns true if iterartor f returns true for at least one item. Use context to set this reference inside the iterator.
        -
          header: partition(f:Function, context:Object = null):Array
          description: 
            Returns Point object with x property set to array of elements for each f iterator returns true and y property for each f iterator returns false. Use context to set this reference inside the iterator.
        -
          header: uniq(f:Function = identity, context:Object = null):Array
          description: 
            Returns new Array with first occurences of duplicatied objects. Use f iterator to define equality criteria. Use context to set this reference inside the iterator.
        -
          header: groupBy(f:Function = identity, context:Object = null, keepOrder:Boolean = false):Object
          description: 
            Returns Object whose keys are unique results of f iterator and values are items for which iterator returns that key. Use f iterator to define equality criteria. Use context to set this reference inside the iterator. If you pass keepOrder as true, then the result is an Array of Points object with x and y values equal to key and values as described above respectively.
        -
          header: indexOf(item:Object):Integer
          description: Returns position of given item.
        -
          header: intersection(arr:Array):Array
          description: Returns Array of shared elements. Argument is an array of arrays to be tested.
        -
          header: selectNonEmpty():Array
          description: Should be called on 2-dim array. Returns new Array with empty Arrays removed.
        -
          header: compact():Array
          description: Returns new Array with null or undefined items removed.
        -
          header: isEmpty():Boolean
          description: Returns true if array is empty; false otherwise.
        -
          header: numerize():Array'
          description: Returns new array with items cast to Number.
        -
          header: print():Void
          description: Prints out every item using artjs.p method.
        -
          header: sum():Number
          description: Returns sum of all elements.
        -
          header: stringify():Array
          description: Returns new array with items cast to String.
artjs:
  name: artjs
  package: window
  description: This is top level object that stores information about framework and few methods that allows you to select the framework mode.
  sections:
    -
      name: Constants
      members:
        -
          header: VERSION:String
          description: Current version of framework
    -
      name: Globals
      members:
        -
          header: Broadcaster
          description: Global {{code('artjs.Channel')}} instance. See "Broadcaster" section in {{linkTo('Event', 'event2')}}
    -     
      name: Aliases
      members:
        - header: artjs.$() -> artjs.Selector.getElements()
        - header: artjs.$A() -> artjs.Array.arrify()
        - header: artjs.$B() -> artjs.ElementBuilder.build()
        - header: artjs.$BA() -> artjs.Delegate.bindAll()
        - header: artjs.$C() -> artjs.ElementBuilder.create()
        - header: artjs.$D() -> artjs.Delegate.create()
        - header: artjs.$DC() -> artjs.Delegate.callback()
        - header: artjs.$E() -> artjs.ElementBuilder.getElement()
        - header: artjs.$F() -> artjs.Delegate.func()
        - header: artjs.$I() -> artjs.Element.insert()
        - header: artjs.$P() -> artjs.ElementBuilder.parse()
        - header: artjs.$T() -> artjs.Timeout.fire()
        - header: artjs.$find() -> artjs.Selector.find()
        - header: artjs.$findAll() -> artjs.Selector.findAll()
        - header: artjs.$get() -> artjs.Ajax.get()
        - header: artjs.$del() -> artjs.Ajax.del()
        - header: artjs.$del() -> artjs.Ajax.del()
        - header: artjs.$parent() -> artjs.Selector.parent()
        - header: artjs.$post() -> artjs.Ajax.post()
        - header: artjs.$put() -> artjs.Ajax.put()
    -
      name: Events
      members:
        -
          header: artjs.onDocumentLoad
          description: Triggered when DOM is loaded.
        - 
          header: artjs.onWindowLoad
          description: Triggered when whole window is loaded (executes after onDocumentLoad).
class:
  name: Class
  package: artjs.utils
  description: Facilitates class construction and inheritance.
  sections:
    -
      name: Usage
      members:
        -
          header: "Class(ctor:Function = null, proto:Object = null, stat:Object = null, superclass:Function = null):Function"
          description: Creates a new class. Returns decorated constructor function passed as a first argument. If no constructor is passed a default one is created.
          params:
            ctor: Constructor function
            proto: Prototype object. Instance properties and methods of the class.
            stat: Class properties and methods.
            superclass: Class to extend from.
          example:
            - "var MyClass = artjs.Class("
            - "  function(name) {"
            - "    this.name = this.super() + ':' + name;"
            - "  },"
            - "  {"
            - "    calculate: function(value) {"
            - "      return this.super(3, 'hello') + 8;"
            - "    }"
            - "  },"
            - "  {"
            - "    getName: function() {"
            - "      return this.super() + ':MyClass';"
            - "    }"
            - "  },"
            - "  MySuperClass"
            - ");"
          more: As you can see in example when extending the class you have access to super method from Constructor function, instance methods and static methods.
    -
      name: Instance properties
      members:
        -
          header: ctor:Function
          description: Reference to constructor function.
    -     
      name: Static properties
      members:
        -
          header: superclass:Function
          description: Reference to constructor function of the parent class.
        -
          header: subclasses:Array
          description: Stores all subclasses of given class.
    -     
      name: Hooks
      members:
        -
          header: _onCreated():Void
          description: 
            - Invoked as a static method when class construction has completed.
            - Useful for class initialization. Some of class properties are set at this point.
            - You must always call super when implementing this hook.
          example:
            - "_onCreated: function() {"
            - "  this.super();"
            - "  console.log(this.subclasses);"
            - "}"
        -
          header: _onExtended():Void
          description: 
            - Invoked as a static method when subclass construction has completed.
            - Useful for class initialization. Some of class properties are set at this point.
            - You must always call super when implementing this hook.
         
          example:
            - "_onExtended: function() {"
            - "  this.super();"
            - "  console.log(this.superclass + ' has been extended by ' + this);"
            - "}"
class2:
  template: class
clock:
  name: Clock
  package: artjs.events
  description: Allows trigger events periodically
  sections:
    -
      name: Constructor
      members:
        -
          header: artjs.Clock(interval:Number, repeat:Number)
          params:
            interval: interval between ticks in miliseconds
            repeat: number of ticks
          example:
            - "var clock = new artjs.Clock(1000, 5);"
    -     
      name: Events
      members:
        -
          header: onChange(clock:artjs.Clock)
          description: Triggered on each tick
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            -
            - "function onClockChange(clock) {"
            - "  console.log('clock change!');"
            - "}"
            -
            - "clock.onChange.add(artjs.$F(onClockChange));"
        -         
          header: onFinish(clock:artjs.Clock)
          description: Triggered after last tick
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            -
            - "function onClockComplete(clock) {"
            - "  console.log('clock complete!');"
            - "}"
            -
            - "clock.onComplete.add(artjs.$F(onClockComplete);"
    -     
      name: Properties
      members:
        -
          header: counter:Number
          description: Number of released ticks
        -
          header: interval:Number
          description: The same property as in constructor
        -
          header: repeat:Number
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: isRunning():Void
          description: Returns true if clock is running; false otherwise
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            -
            - "clock.isRunning(); // false"
            - "clock.start(true);"
            - "clock.isRunning(); // true"
            - "clock.stop();"
            - "clock.isRunning(); // false"
        -
          header: pause():Void
          description: Same as stop() but doesn't reset the counter
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            - 
            - "clock.start(true);"
            - "// ... and some time later"
            - "clock.counter; // 3"
            - "clock.pause();"
            - "clock.counter; // 3"
        -
          header: resume():Void
          description: Resumes ticking after it has been paused
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            -
            - "clock.start();"
            - "// ... and some time later"
            - "clock.counter; // 3"
            - "clock.pause();"
            - "// ... and some time later"
            - "clock.resume();"
            - "clock.counter; // 3"
        -
          header: start(now:Boolean):Void
          description: Starts the clock. First tick after interval or immediately if {{param('now')}} is true
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            -
            - "clock.start()"
        -
          header: stop():Void
          description: Stops the clock and sets counter to zero
          example:
            - "var clock = new artjs.Clock(1000, 5);"
            -
            - "clock.start();"
            - "// ... and some time later"
            - "clock.counter; // 3"
            - "clock.stop();"
            - "clock.counter; // 0"
component:
  name: Base
  package: artjs.component
  description:
    - Components allow you to attach your own view class to element node. 
    - In order to do this simply assign "art" class to your element along with class name of your custom class e.g. {{code('com-domain-Navigation')}} and define {{code('com.domain.Navigation')}} class.
    - For more information see {{linkTo('Component', 'component2')}}.
  sections:
    -
      name: Public methods
      members:
        -
          header: getElement():Element
          description: Returns associated {{code('Element')}}.
    -
      name: Protected methods
      members:
        - 
          header: _fire(id:String):void
          description: Fires {{code('Event')}} identified by {{param('id')}}.
        - 
          header: _handle(id:String, method:String):void
          description: Sets up a listener for {{code('Event')}} identified by {{param('id')}}.
        - 
          header: _handleEmit(id:String, method:String):void
          description: Sets up a listener for {{code('Event')}} identified by {{param('id')}} but only if it has been emited from any of the descendants.
        - 
          header: _handleBroadcast(id:String, method:String):void
          description: Sets up a listener for {{code('Event')}} identified by {{param('id')}} but only if it has been broadcasted by any of the ancestors.
        -
          header: _register(id:String, method:String):void
          description: Registers for {{code('Component')}} load identified by {{param('id')}}. Works the same way as static {{code('onLoad')}} method while delegate is build from current component and {{param('method')}}.
        -
          header: _registerAll(map:Object<String, String>):void
          description: Shorthand method used to call {{code('_register()')}} multiple times. Every {{code('<key, value>')}} pair of {{param('map')}} constitutes argument passed to {{code('_register()')}}. 
    -
      name: Static methods
      members:
        -
          header: find(id:String):artjs.Component
          description: Returns component by {{param('id')}}.
        -
          header: onLoad(id:String, delegate:artjs.Delegate):void
          description: Invokes {{param('delegate')}} immediately if {{code('Component')}} with {{param('id')}} is already instantiated or asynchronically otherwise. In both cases {{param('delegate')}} always receives target {{code('Component')}} as an argument. 
component2:
  template: component
date:
  name: artjs.Date
  package: artjs.utils
  description: Provides set of methods that operates on any Date instance.
  sections:
    -
      name: Static methods
      members:
        -
          header: copy(date:Date):Date
          description: Returns {{param('date')}} copy
          example:
            - "var date = new Date(); // Tue Jun 04 2010 15:41:32 GMT+0200"
            - "var copy = artjs.Date.copy(date);"
            -
            - "date.setDate(6);"
            - "date; // Tue Jun 06 2010 15:41:32 GMT+0200"
            - "copy; // Tue Jun 04 2010 15:41:32 GMT+0200"
        -
          header: firstDay(date:Date):Number
          description: Returns week day of first day in {{param('date')}}'s month (1 means Monday)
          example:
            - "var date = new Date(); // Tue Jun 04 2010 15:41:32 GMT+0200"
            -
            - "artjs.Date.firstDay(date); // 2"
        -
          header: fromDMY(dmy:String, separator:String = '/'):Date
          description: Parses {{param('dmy')}} (<day>/<month>/<year>) expression and returns Date object
          example:
            - "var date = artjs.Date.fromDMY('7/10/2003'); // Tue Oct 07 2003 00:00:00 GMT+0200"
        -
          header: getDateShifted(date:Date, days:Number):Date
          description: Returns date {{param('days')}} after (before if negative) {{param('date')}}
          example:
            - "var date = new Date(); // Tue Jun 07 2010 15:41:32 GMT+0200"
            - "var shifted = artjs.Date.getDateShifted(date, -3); // Tue Jun 04 2010 15:41:32 GMT+0200"
        -
          header: "hmToMinutes(hm:String, separator:String = ':'):Number"
          description: Parses {{param('hm')}} (<hours>:<minutes>) expression and returns Number of minutes
          example:
            - "var date = artjs.Date.hmToMinutes('2:15'); // 135"
        -
          header: "minutesToHM(minutes:Number, separator:String = ':'):String"
          description: Returns <hours>:<minutes> format for given amount of {{param('minutes')}}
          example:
            - "var date = artjs.Date.minutesToHM(135); // '2:15'"
        -
          header: monthDaysNum(date:Date):Number
          description: Returns number of days in {{param('date')}}'s month
          example:
            - "var date = new Date(); // Tue Jun 04 2010 15:41:32 GMT+0200"
            -
            - "artjs.Date.monthDaysNum(date); // 30"
        -
          header: "msToSeconds(ms:String, separator:String = ':'):Number"
          description: Parses {{param('ms')}} (<minutes>:<seconds>) expression and returns Number of seconds'
          example:
            - "var date = artjs.Date.msToSeconds('02:15'); // 135"
        -
          header: "secondsToHMS(seconds:Number, separator:String = ':'):String"
          description: Returns <hours>:<minutes>:<seconds> format for given amount of {{param('seconds')}}
          example:
            - "var date = artjs.Date.secondsToMS(4350); // '1:12:30'"
        -
          header: "secondsToMS(seconds:Number, separator:String = ':'):String"
          description: Returns <minutes>:<seconds> format for given amount of {{param('seconds')}}
          example:
            - "var date = artjs.Date.secondsToMS(135); // '02:15'"
        -
          header: stripDayTime(date:Date):Date
          description: Returns date without time part
          example:
            - "var date = new Date(); // Tue Jun 07 2010 15:41:32 GMT+0200"
            - "var stripped = artjs.Date.stripDayTime(date); // Tue Jun 07 2010 00:00:00 GMT+0200"
        -
          header: toDMY(date:Date, separator:String = '/'):String
          description: Returns {{param('date')}}'s string representation of day, month, year
          example:
            - "var date = new Date(); // Tue Jun 04 2010 15:41:32 GMT+0200"
            -
            - "artjs.Date.toDMY(date); // '04/06/2010'"
        -
          header: "toHMS(date:Date, separator:String = ':'):String"
          description: Returns {{param('date')}}'s string representation of hour, minute, second
          example:
            - "var date = new Date(); // Tue Jun 04 2010 15:41:32 GMT+0200"
            -
            - "artjs.Date.toHMS(date); // '15:41:32'"
        -
          header: "toYMD(date:Date, separator:String = '/'):String"
          description: Returns {{param('date')}}'s string representation of year, month, day
          example:
            - "var date = new Date(); // Tue Jun 04 2010 15:41:32 GMT+0200"
            -
            - "artjs.Date.toYMD(date); // '2010/06/04'"
date_picker:
  name: DatePicker
  package: artjs.component
  description: Allows any text input element to act as a date picker component. Just set it's class to {{code('art artjs-DatePicker')}}.
delegate:
  name: Delegate
  package: artjs.events
  description: Allows to keep context object along with function.
  sections:
    -
      name: Constructor
      members:
        -
          header: Delegate(object:Object, method:Function, ...rest)
          params:
            object: context object
            method: any function
          description: 
            - "Delegate wraps context object, any function and optional arguments into single Delegate object. When you ask for callback function:"
            - "var delegate = new artjs.Delegate(this, this.onChange, 'hello');"
            - "var callback = delegate.callback();"
            -
            - "you will get a Function object that when called will have set {{code('this')}} to context object."
            - "Optionally when you pass {{code('true')}} to {{code('delegate.callback()')}}"
            - "the {{code('callback')}} handler will receive \"source\" as first argument (\"source\" points to object who actually called the callback)."
            - "Arguments list that are passed to callback function are:"
            - "- source object (if specified)"
            - "- arguments that are passed directly when it is being called"
            - "- optional arguments (...rest) passed to delegate when creating the instance"
          example:
            - "function onClick(link, e, msg) {"
            - "  console.log('Link clicked! ' + msg);"
            - "  return false;"
            - "}"
            -
            - "var delegate = new artjs.Delegate(this, onClick, 'hello');"
            -
            - "link.onclick = delegate.callback(true);"
    -
      name: Properties
      members:
        -
          header: args:Array
          description: Optional set of arguments
        -
          header: method:Function
          description: The same property as in constructor
        -
          header: object:Object
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: callback(withSource:Boolean):Function
          description: 
            - "Returns Function object, than when called will receive source object as first argument if" 
            - "{{code('withSource')}} is true, and {{code('this')}} in that function" 
            - "will always point to context object"
          example:
            - "var obj = {id: 4};"
            -
            - "function meth(source, name, greeting) {"
            - "  console.log('source: ' + source + ', id: ' + this.id + ': ' + greeting + \", it's \" + name);"
            - "}"
            -
            - "var delegate = new artjs.Delegate(obj, meth, 'hello');"
            - "var callback = delegate.callback(true);"
            -
            - "callback('Steve');"
        -
          header: invoke():Object
          description: Calls the delegate method with object as a context
          example:
            - "function method(value, message) {"
            - "  console.log('method called! value:' + value + ', message: ' + message);"
            - "  return true;"
            - "}"
            -
            - "var delegate = new artjs.Delegate(this, method, 'hello');"
            - "var result = delegate.invoke(5); // true"
    -
      name: Static Methods
      members:
        -
          header: callback(object:Object, method:Function, withSource:Boolean, ...rest):Function
          description: A shorthand function that allows to create delegate and returns it's callback at one step
          example:
            - "var obj = {id: 4};"
            - ""
            - "function meth(source, name, greeting) {"
            - "  console.log('source: ' + source + ', id: ' + this.id + ': ' + greeting + \", it's \" + name);"
            - "}"
            - ""
            - "var callback = artjs.Delegate.callback(obj, meth, true, 'hello');"
            - ""
            - "callback('Steve');"
        -
          header: create(object:Object, method:Function, ...rest):Delegate
          description: A shorthand function that allows to create and return new delegate object
          example:
            - "var obj = {id: 4};"
            - ""
            - "function meth(source, name, greeting) {"
            - "  console.log('source: ' + source + ', id: ' + this.id + ': ' + greeting + \", it's \" + name);"
            - "}"
            - ""
            - "var delegate = artjs.Delegate.create(obj, meth, 'hello');"
            - "var callback = delegate.callback(true);"
            - ""
            - "callback('Steve');"
delegate2:
  template: delegate
element:
  name: artjs.Element
  package: artjs.utils
  description: Provides set of methods that operate on HTML Element instance.
  sections:
    -
      name: Static methods
      members:
        -
          header: addClass(element:Element, name:String):Void
          description: Adds class identified by {{param('name')}} to {{param('element')}} (only if it doesn't already have this class)
        -
          header: center(element:Element):Void
          description: Centers {{param('element')}} on the screen. This action takes effect only for elements with absolute position.
        -
          header: centerH(element:Element):Void
          description: Centers {{param('element')}} horizontally on the screen. This action takes effect only for elements with absolute position.
        -
          header: centerV(element:Element):Void
          description: Centers {{param('element')}} vertically on the screen. This action takes effect only for elements with absolute position
        -
          header: clone(element:Element, deep:Boolean):Node
          description: Alias for Node.cloneNode(deep).
        -
          header: disable(element:Element):Void
          description: Disables the {{param('element')}}
        -
          header: elements(element:Element):Array
          description: Returns array of immediate descendants (Elements) of {{param('element')}}
        -
          header: enable(element:Element):Void
          description: Enables the {{param('element')}}
        -
          header: firstElement(element:Element):Element
          description: Returns {{param('element')}}'s first child (Element)
        -
          header: getAttributes(element:Element):Object
          description: Returns attributes as an Object
        -
          header: getBounds(element:Element, real:Boolean, withoutScroll:Boolean):Rectangle
          description: Returns position and size of {{param('element')}} as a (x, y, width, height) Rectangle.
          more: 
            - If {{param('real')}} is set to true size is calculated even if element is hidden (otherwise size would return value of (0, 0)).
            - If {{param('withoutScroll')}} is set to true, position is calculated relative to current view's origin; otherwise to document's origin.
        -
          header: getCenteredPosition(element:Element):Point
          description: Returns position of {{param('element')}} as if it was centered on the screen
        -
          header: getClasses(element:Element):Array
          description: Returns array of {{param('element')}}'s classes
        -
          header: getContent(element:Element):String
          description: Returns content (like innerHTML) of {{param('element')}}
        -
          header: getDocumentSize():Point
          description: Returns document size
        -
          header: getPosition(element:Element, withoutScroll:Boolean):Point
          description: Returns position of the {{param('element')}} on the screen.
          more: If {{param('withoutScroll')}} is set to true posision is calculated relative to current view's origin; otherwise to document's origin
        -
          header: getScrollPosition():Point
          description: Returns scroll (x, y) values as a Point
        -
          header: getSize(element:Element):Point
          description: Returns size of the {{param('element')}} as a artjs.math.Point object which x property is width and y property is height
        -
          header: getWindowSize():Point
          description: Returns window size
        -
          header: hasClass(element:Element, name:String):Boolean
          description: Returns true if {{param('element')}} has class {{param('name')}}; false otherwise
        -
          header: hide(element:Element):Void
          description: Hides the {{param('element')}}
        -
          header: isElement(element:Element):Boolean
          description: Returns true if {{param('element')}} is Element; false otherwise
        -
          header: isHidden(element:Element):Boolean
          description: Returns true if the {{param('element')}} is hidden; true otherwise
        -
          header: next(element:Element):Node
          description: Returns {{param('element')}}'s next sibling (Element)
        -
          header: parent(element:Element):Element
          description: Returns {{param('element')}}'s parent element
        - 
          header: prev(element:Element):Node
          description: Returns {{param('element')}}'s previous sibling (Element)
        -
          header: putAfter(element:Element, ref:Node):Node
          description: Inserts clone of the {{param('element')}} as next sibling of {{param('ref')}} node
        -
          header: putAtBottom(element:Element, ref:Node):Node
          description: Inserts clone of the {{param('element')}} as the last child of {{param('ref')}} node
        -
          header: putAtTop(element:Element, ref:Node):Node
          description: Inserts clone of the {{param('element')}} as the first child of {{param('ref')}} node
        -
          header: putBefore(element:Element, ref:Node):Node
          description: Inserts clone of the {{param('element')}} as previous sibling of {{param('ref')}} node
        -
          header: remove(element:Element):Node
          description: Removes the {{param('element')}}
        -
          header: removeClass(element:Element, name:String):Void
          description: Removes class identified by {{param('name')}} from {{param('element')}} (only if it have this class)
        -
          header: replace(element:Element, ref:Node, clone:Boolean):Node
          description: Replaces {{param('ref')}} with an {{param('element')}} (or its clone if {{param('clone')}} is set to true)
        -
          header: serialize(element:Element):Object
          description: Serializes content of {{param('element')}} (usually form) and returns its data as Object
        -
          header: setAlpha(element:Element, value:Number):Void
          description: Sets {{param('element')}}'s transparency; {{param('value')}} 0 means transparent, 1 means opaque
        -
          header: setClass(element:Element, name:String, add:Boolean):Void
          description: If {{param('add')}} is true it adds, otherwise removes class identified by {{param('name')}} to {{param('element')}}
        -
          header: setContent(element:Element, content:String):Void
          description: Sets the content (like innerHTML) of {{param('element')}}
        -
          header: setEnabled(element:Element, enabled:Boolean):Void
          description: Enables {{param('element')}} if {{param('enabled')}} is true; disables otherwise
        -
          header: setPosition(element:Element, position:Point):Void
          description: Sets the position of {{param('element')}} on the screen. This action has effect for elements with absolute position
        -
          header: setVisible(element:Element, visible:Boolean):Void
          description: Shows the {{param('element')}} if {{param('visible')}} argument is set to true; hides otherwise
        -
          header: setX(element:Element, value:Number):Void
          description: Sets x position of {{param('element')}} on the screen. This action has effect for elements with absolute position
        -
          header: setY(element:Element, value:Number):Void
          description: Sets y position of {{param('element')}} on the screen. This action has effect for elements with absolute position
        -
          header: show(element:Element):Void
          description: Shows the {{param('element')}}
        -
          header: toggle(element:Element):Void
          description: Shows the {{param('element')}} if it's hidden; hides otherwise
        -
          header: toggleClass(element:Element, name:String):Void
          description: Toggles class identified by {{param('name')}} of {{param('element')}}
element_builder:
  name: ElementBuilder
  package: artjs.dom
  description: Allows to create DOM elements
  sections:
    -
      name: Constructor
      members:
        -
          header: ElementBuilder(name:String, attributes:Object, value:String, empty:Boolean)
          params:
            name: element name
            attributes: element attributes
            value: element inner text
            empty: if true, empty element will be created
          example:
            - "var builder = new artjs.ElementBuilder('span', {class: 'price'}, '$199');"
            -
            - "builder.toString(); // <span class=\"price\">$199</span>'"
    -
      name: Properties
      members:
        -
          header: attributes:Object
          description: The same property as in constructor
        -         
          header: empty:Boolean
          description: The same property as in constructor
        -
          header: name:String
          description: The same property as in constructor
        -
          header: value:Object
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: getElement():Element
          description: Builds and returns new Element
          example:
            - "var builder = new artjs.ElementBuilder('span', {class: 'price'}, '$199');"
            -
            - "var element = builder.getElement();"
            -
            - "element.toString(); // [object HTMLSpanElement]"
        -
          header: toString():String
          description: String representation of element
          example:
            - "var builder = new artjs.ElementBuilder('span', {class: 'price'}, '$199');"
            -
            - "builder.toString(); // <span class=\"price\">$199</span>"
    -
      name: Static Methods
      members:
        -
          header: build(name:String, attributes:Object, value:String, empty:Boolean):ElementBuilder
          description: Returns new instance while passing all arguments
          example:
            - "var builder = artjs.ElementBuilder.build('span', {class: 'price'}, '$199');"
            -
            - "builder.toString(); // <span class=\"price\">$199</span>"
        -
          header: parse(string:String):Element
          description: Returns <span class="code">string</span> as an Element
          example:
            - "var element = artjs.ElementBuilder.parse('<span class=\"price\">$199</span>');"
            -
            - "element.toString(); // [object HTMLSpanElement]"
        -
          header: create(name:String, attributes:Object, value:String, empty:Boolean):Element
          description: Performs build and parse methods in one step
          example:
            - "var element = artjs.ElementBuilder.create('span', {class: 'price'}, '$199');"
            -
            - "element.toString(); // [object HTMLSpanElement]"
        -
          header: getElement(name:String, attributes:Object, value:String, empty:Boolean):Element
          description: Works the same as corresponding instance method
          example:
            - "var element = artjs.ElementBuilder.getElement('span', {class: 'price'}, '$199');"
            -
            - "element.toString(); // [object HTMLSpanElement]"
        -
          header: getCollection(n:Integer, element:ElementBuilder):String
          description: Returns html string with element repeated n times
          example:
            - "var element = artjs.ElementBuilder.getElement('span', {class: 'price'});"
            - "var html = artjs.ElementBuilder.getCollection(3, element);"
            -
            - "element.toString(); // <span class=\"price\"></span><span class=\"price\"></span><span class=\"price\"></span>"
event:
  name: artjs.Event
  package: artjs.events
  description: Defines object capable of dispatching events.
  sections:
    -
      name: Constructor
      members:
        -
          header: artjs.Event(name:String = null)
          params:
            name: name of the event
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
    -
      name: Methods
      members:
        -
          header: add(delegate:artjs.Delegate):Void
          description: Registers listener
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
            -
            - "myEvent.add(new Delegate(null, function() {"
            - "  console.log('event!')"
            - "}));"
        -
          header: fire():Array
          description: Triggers the event and returns responses from handlers as an array
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
            -
            - "myEvent.add(artjs.$F(function() {"
            - "  console.log('event!');"
            - "  return 2;"
            - "}));"
            - "// ...then at some point you dispatch the event"
            - "myEvent.fire(this, 'hello'); //2]"
        -
          header: getLength():Number
          description: Amount of listeners currently registered
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
            - "var delegateOne = artjs.$F(function(msg)"
            - "  console.log('event says to delegate 1: ' + msg);"
            - "});"
            - "var delegateTwo = artjs.$F(function(msg)"
            - "  console.log('event says to delegate 2: ' + msg);"
            - "});"
            -
            - "myEvent.getLength(); // 0"
            - "myEvent.add(delegateOne);"
            - "myEvent.getLength(); // 1"
            - "myEvent.add(delegateTwo);"
            - "myEvent.getLength(); // 2"
            - "myEvent.removeAll();"
            - "myEvent.getLength(); // 0"
        -
          header: getItems():Array<artjs.Delegate>
          description: Returns {{code('Array')}} of registered listeners.
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
            -
            - "myEvent.getItems().length // 0'"
            - "myEvent.add(artjs.$F(function() {"
            - "  console.log('event!');"
            - "}));"
            - "myEvent.getItems().length // 1"
        -
          header: getName():String
          description: Returns value passed to constructor.
        -
          header: remove(delegate:artjs.Delegate):Void
          description: Removes listener
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
            - "var delegate = artjs.$F(function(msg)"
            - "  console.log('event says: ' + msg)"
            - "});"
            -
            - "myEvent.add(delegate);"
            - "myEvent.fire('hello!'); // delegate handles event"
            - "myEvent.remove(delegate);"
            - "myEvent.fire('hello!'); // nothing happens"
        -
          header: removeAll():Void
          description: Removes all listeners
          example:
            - "var myEvent = new artjs.Event('MyClass::myEvent');"
            - "var delegateOne = artjs.$F(function(msg)"
            - "  console.log('event says to delegate 1: ' + msg);"
            - "});"
            - "var delegateTwo = artjs.$F(function(msg)"
            - "  console.log('event says to delegate 2: ' + msg);"
            - "});"
            -
            - "myEvent.add(delegateOne);"
            - "myEvent.add(delegateTwo);"
            - "myEvent.fire('hello!'); // delegates handle event"
            - "myEvent.removeAll();"
            - "myEvent.fire('hello!');// nothing happens"
event2: 
  template: event
introduction: 
  template: introduction
list:
  name: List
  package: artjs.data
  description: List data model implementation.
  sections:
    -
      name: Constructor
      members:
        -
          header: List(data:Array = [])
          description: "{{code('data')}} - collection data"
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
    -
      name: Events
      members:
        -
          header: onChange(list:List)
          description: Dispatched every time the collection changes
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "function onChange(list) {"
            - "  console.log('list has changed!');"
            - "}"
            -
            - "list.onChange.add(artjs.$F(onChange));"
    -
      name: Properties
      members:
        -
          header: allowDuplicates:Boolean = true
          description: Flag that allows having duplicates in collection
          more: If this flag is set to true, adding existing item won't do anything.
        -
          header: loop:Boolean = false
          description: Flag that allows periodically return the item, even if index is out of collection bounds
          more: If this flag is set to true and you try to fetch an item by index out of collection bounds, you will receive item as if you were fetching it from infinite collection consisting of periodically repeated items of initial collection.
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.loop = true;"
            - "list.getItemAt(-1); //5"
            - "list.getItemAt(6); //2"
    -   
      name: Methods
      members:
        -
          header: addItem(item:Object, noEvent:Boolean):Number
          description:
            - Adds {{param('item')}} to the end of collection and returns new length.
            - If {{param('noEvent')}} is set to true, this action wont dispatch the {{code('change')}} event.
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.addItem(6); // 6"
            - "list.toString() // 1, 2, 3, 4, 5, 6"
        -
          header: addItemAt(item:Object, idx:Number, noEvent:Boolean):Number
          description: Adds {{param('item')}} to collection at specific position and returns new length
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.addItemAt(6, 2); // 6"
            - "list.toString() // 1, 2, 6, 3, 4, 5"
        -
          header: decrease():Void
          description: Decreases pointer
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.decrease();"
            - "list.getPointer(); // 1"
        -
          header: isEmpty():Boolean
          description: Returns true if collection is empty; false otherwise
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.isEmpty(); // false"
            - "list.removeAll();"
            - "list.isEmpty(); // true"
        -
          header: getCurrent():Object
          description: Returns current item
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.getCurrent(); // 3"
        -
          header: getFirst():Object
          description: Returns first item of collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getFirst(); // 1"
        -
          header: getItemAt(idx:Number):Object
          description: Retrieves {{code('item')}} at specific position
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getItemAt(3); // 4"
        -
          header: getItemIndex(item:Object):Number
          description: Retrieves {{param('item')}}'s index
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getItemIndex(3); // 2"
        -
          header: getItems():Array
          description: Returns copy of collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getItems().toString(); // 1, 2, 3, 4, 5"
        -
          header: getLast():Object
          description: Returns last item of collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getLast(); // 5"
        -
          header: getLength():Number
          description: Returns length of collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getLength(); // 5"
        -
          header: getNext():Object
          description: Returns item after current
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.getNext(); // 4"
        -
          header: getPointer():Number
          description: Returns pointer
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.getPointer(); // 0"
            - "list.increase();"
            - "list.getPointer(); // 1"
        -
          header: getPrevious():Object
          description: Returns item before current
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.getPrevious(); // 2"
        -
          header: hasItem(item:Object):Boolean
          description: Returns true if {{param('item')}} is in collection; false otherwise
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.hasItem(4); // true"
            - "list.hasItem(7); // false"
        -
          header: increase():Void
          description: Increases pointer
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.increase();"
            - "list.getPointer(); // 3"
        -
          header: isLast():Boolean
          description: Returns true if pointer is set to last item in collection; false otherwise
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(4);"
            - "list.isLast(); // true"
        -
          header: moveItem(fromIndex:Number, toIndex:Number):Void
          description: Moves {{code('item')}} from, to specific position
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.moveItem(3, 0);"
            - "list.toString(); // 4, 1, 2, 3, 5;"
        -
          header: removeAll(noEvent:Boolean):Void
          description: Removes all items from collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.removeAll();"
            - "list.toString() //"
        -
          header: removeItem(item:Object, onlyFirst:Boolean, noEvent:Boolean):Void
          description: Removes {{param('item')}} from collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.removeItem(2); // 4"
            - "list.toString() // 1, 3, 4, 5"
        -
          header: removeItemAt(idx:Number, noEvent:Boolean):Void
          description: Removes {{code('item')}} at specific position from collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.removeItemAt(2); // 4"
            - "list.toString() // 1, 2, 4, 5"
        -
          header: "reset():Void"
          description: "Sets pointer to zero"
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.getPointer(); // 2"
            - "list.reset();"
            - "list.getPointer(); // 0"
        -
          header: setItems(items:Array):Void
          description: Set the collection
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.toString(); // 1, 2, 3, 4, 5"
            - "list.setItems([4, 5, 6]);"
            - "list.toString(); // 4, 5, 6"
        -
          header: setPointerAtItem(item:Object):Void
          description: Set the pointer at position of {{param('item')}}
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointerAtItem(2);"
            - "list.getPointer(); // 1"
        -
          header: setPointer(i:Number):Void
          description: Sets pointer
          example:
            - "var list = new artjs.List([1, 2, 3, 4, 5]);"
            -
            - "list.setPointer(2);"
            - "list.getPointer(); // 2"
log:
  name: Log
  package: artjs.utils
  description: Allows you to output debug messages.
  sections:
    -
      name: Static methods
      members:
        -
          header: log(args...:*):Void
          description: Uses internally console.log to display messages.
        -
          header: p(args...:*):Void
          description: Alias method for log().
math:
  name: artjs.Math
  package: artjs.utils
  description: Provides set of math functions.
  sections:
    -
      name: Static methods
      members:
        -
          header: limit(x:Number, a:Number, b:Number):Number
          description: Returns {{param('x')}} value limited to [{{param('a')}}, {{param('b')}}] range
          example:
            - artjs.Math.limit(6, 2, 13); // 6
            - artjs.Math.limit(6, 8, 13); // 8
            - artjs.Math.limit(6, -2, 3); // 3
        -
          header: sawtooth(x:Number, a:Number, b:Number):Number
          description: Returns {{param('x')}} value periodically limited to [{{param('a')}}, {{param('b')}}] range
          example:
            - artjs.Math.sawtooth(6, 2, 13); // 6
            - artjs.Math.sawtooth(6, 8, 13); // 11
            - artjs.Math.sawtooth(6, -2, 3); // 1
        -
          header: sgn(x:Number):Number
          description:  Signum function of {{param('x')}}
          example:
            - artjs.Math.sgn(-2); // -1
            - artjs.Math.sgn(0); // 0
            - artjs.Math.sgn(15); // 1
        -
          header: stairs(x:Number, a:Number, b:Number):Number
          description: "\"stairs\" function of {{param('x')}}"
          example:
            - artjs.Math.stairs(6, 2, 4); // 2
            - artjs.Math.stairs(6, 1, 2); // 5
            - artjs.Math.stairs(6, -1, 1); // 3
object:
  name: artjs.Object
  package: artjs.utils
  description: Provides set of methods that operates on any Object instance.
  sections:
    -
      name: Static methods
      members:
        -
          header: all(object:Object, callback:Function):Boolean
          description: Returns true if for all values {{code('callback')}} returns true; false otherwise
          example:
            - "var object = {color: 'white', id: 5};"  
            -
            - "artjs.Object.all(object, function(i) {" 
            - "  return i !== false;"  
            - "}); // true"
            -
            - "artjs.Object.all(object, function(i) {" 
            - "  return !isNaN(parseInt(i));"
            - "}); // false"
        -
          header: copy(object:Object):Object
          description: Creates a copy of an {{param('object')}}.
          example:
            - "var object = {id: 4};" 
            - "var copy = artjs.Object.copy(object);"  
            -
            - "object.id = 5;" 
            - "object.id; // 5"
            - "copy.id; // 4"
        -
          header: copyProps(source:Object, target:Object):Void
          description: Copies properties from {{param('source')}} object to {{param('target')}} object.
          example:
            - "var source = {id: 4};"
            - "var target = {active: true};"  
            -
            - "artjs.Object.copyProps(source, target);"  
            -
            - "source; // {id: 4}"
            - "target; // {active: true, id: 4}"
        -
          header: each(object:Object, callback:Function):Void
          description: Iterates over properties and passes key and value to {{param('callback')}}
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};"  
            - "artjs.Object.each(object, function(k, v) {" 
            - "  console.log(k, v);"
            - "});"
        -
          header: eachKey(object:Object, callback:Function):Void
          description: Iterates over properties and passes key to {{param('callback')}}
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};"
            - "artjs.Object.eachKey(object, function(i) {"
            - "  console.log(i);"
            - "});"
        -
          header: eachValue(object:Object, callback:Function):Void
          description: Iterates over properties and passes value to {{param('callback')}}
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};"  
            - "artjs.Object.eachValue(object, function(v) {" 
            - "  console.log(v);" 
            - "});"
        -
          header: isEmpty(object:Object):Boolean
          description: Returns true if {{param('object')}} has no properties; false otherwise
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};" 
            - "var empty = {};"
            -
            - "artjs.Object.isEmpty(object); // false"
            - "artjs.Object.isEmpty(empty); // true"
        -
          header: "extend(target:Object, base:Object):Void"
          description: "Copies properties from {{param('base')}} object to {{param('target')}} object. In fact it works the same way as {{param('copyProps()')}}, the only difference is arguments order."
          example:
            - "var base = {id: 4};"
            - "var target = {active: true};"  
            -
            - "artjs.Object.extend(target, base);"  
            -
            - "base; // {id: 4}"
            - "target; // {active: true, id: 4}"
        -
          header: fromArray(array:Array):Object
          description: Transforms 2-dim {{param('array')}} into object
          example:
            - "var array = [['color', 'white'], ['id', 5]];"
            -
            - "artjs.Object.fromArray(array); // {color: 'white', id: 5}"
        -
          header: include(object:Object, item:Object):Boolean
          description: Returns true if any {{param('object')}} value is equal to {{param('item')}}; false otherwise
          example:
            - "var object = {color: 'white', id: 5};"  
            -
            - "artjs.Object.include(object, 5); // true"
            - "artjs.Object.include(object, true); // false"
        -
          header: includeAll(object:Object, subset:Object):Boolean
          description: Returns true if all {{param('subset')}} values can be found among {{param('object')}}'s values; false otherwise
          example:
            - "var object = {color: 'white', id: 5};"  
            -
            - "artjs.Object.includeAll(object, {color: 'white', id: 5}); // true"
            - "artjs.Object.includeAll(object, {id: 5, name: 'Mike'}); // false"
        -
          header: map(object:Object, callback:Function):Array
          description: Maps key and value to Array item using {{param('callback')}} function
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};" 
            - "var mapped = artjs.Object.map(object, function(k, v) {return k + ':' + v});"  
            -
            - "mapped; // ['id:4', 'active:true', 'project_id:4', 'status:4']"
        -
          header: mapKey(object:Object, callback:Function):Object
          description: Transforms key using {{param('callback')}} function
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};" 
            - "var mapped = artjs.Object.mapKey(object, function(k) {"
            - "  return artjs.String.capitalizeUnderscored(k);"
            - "});"
            -
            - "mapped; // {Id: 8, Active: 2, ProjectId: 8, Status: 8}"
        -
          header: mapValue(object:Object, callback:Function):Object
          description: Transforms value using {{param('callback')}} function
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};"
            - "var mapped = artjs.Object.mapValue(object, function(k, v) {return v * 2});"
            -
            - "mapped; // {id: 8, active: 2, project_id: 8, status: 8}"
        -
          header: merge(target:Object, base:Object):Object
          description: Works the same as {{code('extend()')}} but returns modified {{param('target')}} object.
          example:
            - "var base = {id: 4};"
            - "var target = {active: true};"
            -
            - "artjs.Object.merge(target, base); // {active: true, id: 4}"  
            -
            - "base; // {id: 4}"
            - "target; // {active: true, id: 4}"
        -
          header: reject(object:Object, callback:Function):Object
          description: Returns copy of {{param('object')}} without properties for which {{param('callback')}} returns true
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};" 
            - "var filtered = artjs.Object.reject(object, function(i) {" 
            - "  return i === true;"
            - "});"
            -
            - "filtered; // {id: 4, project_id: 4, status: '4'}"
        -
          header: removeValue(object:Object, value:Object):Void
          description: Removes all {{param('object')}}'s properties with value equal to {{param('value')}} param
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};"  
            -
            - "artjs.Object.removeValue(object, 4);"  
            -
            - "object; // {active: true, status: '4'}"
        -
          header: removeValues(object:Object, values:Array):Void
          description: Works the same as removeValue but you can remove many {{param('values')}} by passing them in array
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};"  
            -
            - "artjs.Object.removeValues(object, [4, '4']);"  
            -
            - "object; // {active: true}"
        -
          header: select(object:Object, callback:Function):Object
          description: Returns copy of {{param('object')}} containing only properties for which {{param('callback')}} returns true
          example:
            - "var object = {id: 4, active: true, project_id: 4, status: '4'};" 
            - "var filtered = artjs.Object.select(object, function(v, k) {"
            - "  return !isNaN(parseFloat(v));"
            - "});"
            -
            - "filtered; // {id: 4, project_id: 4, status: '4'}"
        -
          header: toArray(object:Object):Array
          description: Transforms {{param('object')}} into array
          example:
            - "var object = {color: 'white', id: 5};"  
            -
            - "artjs.Object.toArray(object); // ['color', 'white'], ['id', 5]]"
        -
          header: toQueryString(object:Object):String
          description: Returns query string representation of {{param('object')}}
          example:
            - "var object = {color: 'white', id: 5, user:name: 'Andy', id: 3}};"  
            -
            - "artjs.Object.toQueryString(object); // color=white&id=5&user[name]=Andy&user[id]=3"
point:
  name: Point
  package: artjs.math
  description: Math 2-dimentional vector implementation
  sections:
    -
      name: Constructor
      members:
        -
          header: Point(x:Number, y:Number)
          params:
            x: x coordinate
            y: y coordinate
          example:
            - "var point = new artjs.Point(20, 40);"
    -
      name: Properties
      members:
        -
          header: x:Number
          description: The same property as in constructor
        -
          header: y:Number
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: add():artjs.Point
          description: Adds other vector
          example:
            - "var p1 = new artjs.Point(2, 3);"
            - "var p2 = new artjs.Point(4, -1);"
            -
            - "p1.add(p2); // (6, 2)"
        -
          header: dot():Number
          description: Dot product of this vector and other vector
          example:
            - "var p1 = new artjs.Point(2, 3);"
            - "var p2 = new artjs.Point(4, -1);"
            -
            - "p1.dot(p2); // 5"
        -
          header: getLength():Number
          description: Length of a vector
          example:
            - "var point = new artjs.Point(3, 4);"
            -
            - "point.getLength(); // 5"
        -       
          header: getReversed():artjs.Point
          description: Returns reversed vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.getReversed(); // (-2, -3)"
            - "p; // (2, 3)"
        -
          header: getTransposed():artjs.Point
          description: Returns new transposed vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.getTransposed(); // (3, 2)"
            - "p; // (2, 3)"
        -
          header: reverse():artjs.Point
          description: Reverses vector and returns this vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.reverse(); // (-2, -3)"
            - "p; // (-2, -3)"
        -       
          header: reverseX():artjs.Point
          description: Reverses x coordinate and returns this vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.reverse(); // (-2, 3)"
            - "p; // (-2, 3)"
        -
          header: reverseY():artjs.Point
          description: Reverses y coordinate and returns this vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.reverse(); // (2, -3)"
            - "p; // (2, -3)"
        -
          header: sub():Void
          description: Subtracts other vector
          example:
            - "var p1 = new artjs.Point(2, 3);"
            - "var p2 = new artjs.Point(4, -1);"
            -
            - "p1.sub(p2); // (-2, 4)"
        -
          header: times(k:Number):artjs.Point
          description: Returns new vector multiplied by {{param('k')}}
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.times(-3); // (-9, -6)"
            - "p; // (2, 3)"
        -
          header: toString():String
          description: Returns string representation od vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.toString(); //2, 3]"
        -
          header: transpose():artjs.Point
          description: Transposes coordinates and returns this vector
          example:
            - "var p = new artjs.Point(2, 3);"
            -
            - "p.transpose(); // (3, 2)"
            - "p; // (3, 2)"
queue:
  name: Queue
  package: artjs.data
  description: Queue data model implementation
  sections:
    -
      name: Constructor
      members:
        -
          header: Queue(data:Array = [])
          params: 
            data: collection data
          example:
            - "var queue = new artjs.Queue([1, 2, 3, 4, 5]);"
    -
      name: Events
      members:
        -
          header: onChange(list:artjs.List)
          description: Dispatched every time the collection changes
          example:
            - "var queue = new artjs.Queue([1, 2, 3, 4, 5]);"
            -
            - "function onChange(queue) {"
            - "  console.log('queue has changed!');"
            - "}"
            -
            - "queue.onChange.add(artjs.$F(onChange));"
    -
      name: Methods
      members:
        -
          header: addItem(item:Object):Void
          description: Adds {{param('item')}} to the end of collection
          example:
            - "var queue = new artjs.Queue([1, 2, 3, 4, 5]);"
            -
            - "queue.addItem(6); // 6"
            -
            - "queue.toString() // 1, 2, 3, 4, 5, 6"
        -
          header: empty():Boolean
          description: Returns true if collection is empty; false otherwise
          example:
            - "var queue = new artjs.Queue([3]);"
            -
            - "queue.isEmpty(); // false"
            -
            - "var item = queue.getItem();"
            -
            - "queue.isEmpty(); // true"
        -
          header: getItem():Object
          description: Pops and returns current item
          example:
            - "var queue = new artjs.Queue([1, 2, 3, 4, 5]);"
            - "var item = queue.getItem(); // 1"
            -
            - "queue.toString(); // 2, 3, 4, 5"
        -
          header: getLength():Number
          description: Returns length of collection
          example:
            - "var queue = new artjs.Queue([1, 2, 3, 4, 5]);"
            -
            - "queue.getLength(); // 5"
        -
          header: setData(data:Array):Void
          description: Sets the collection
          example:
            - "var queue = new artjs.Queue([1, 2, 3, 4, 5]);"
            -
            - "queue.toString(); // 1, 2, 3, 4, 5"
            -
            - "queue.setData([4, 5, 6]);"
            -
            - "queue.toString(); // 4, 5, 6"
queued_clock:
  name: QueuedClock
  package: artjs.events
  description: Allows to trigger events periodically.
  sections:
    -
      name: Constructor
      members:
        -
          header: QueuedClock(interval:Number)
          params:
            interval: interval between clock ticks in miliseconds
          description: The class works like queue. While you keep adding {{code('Delegate')}} items, the clock periodically removes current item and calls invoke() on it.
          example:
            - "var qc = new artjs.QueuedClock(1000);"
            -
            - "function onTick() {}"
            - "qc.addItem(artjs.$F(onTick)) // 1;"
            - "qc.getLength(); // 1"
            - "qc.start();"
            - "// after first tick the collection is empty"
            - "qc.getLength(); // 0"
    -
      name: Properties
      members:
        -
          header: interval:Number
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: addItem(item:artjs.Delegate):Number
          description: Adds delegate to collection and returns its new length
          example:
            - "var qc = new artjs.QueuedClock(1000);"
            -
            - "qc.addItem(artjs.$F(function() {})) // 1;"
        -
          header: getLength():Number
          description: Returns current length of collection
          example:
            - "var qc = new artjs.QueuedClock(1000);"
            -
            - "qc.getLength(); // 0"
            - "qc.addItem(artjs.$F(function() {}));"
            - "qc.getLength(); // 1"
        -
          header: start():Void
          description: Starts execution
          example:
            - "var qc = new artjs.QueuedClock(1000);"
            -
            - "qc.addItem(artjs.$F(function() {}));"
            - "qc.start();"
rectangle:
  name: Rectangle
  package: artjs.math
  description: Math rectangle implementation
  sections:
    -
      name: Constructor
      members:
        -
          header: Rectangle(left:Number, top:Number, right:Number, bottom:Number)
          params:
            left: left edge
            top: top edge
            right: right edge
            bottom: bottom edge
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
    -
      name: Properties
      members:
        -
          header: bottom:Number
          description: The same property as in constructor
        -
          header: left:Number
          description: The same property as in constructor
        -
          header: right:Number
          description: The same property as in constructor
        -
          header: top:Number
          description: The same property as in constructor
    -
      name: Methods
      members:
        -
          header: getArea():Number
          description: Area of rectangle
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getArea(); // 200"
        -
          header: getHeight():Number
          description: Height of rectangle
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getHeight(); // 10"
        -
          header: getLeftBottom():Point
          description: Left-bottom corner vector
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getRightBottom(); //10, 20]"
        -
          header: getLeftTop():Point
          description: Left-top corner vector
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getLeftTop(); //10, 10]"
        -
          header: getRightBottom():Point
          description: Right-bottom corner vector
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getRightBottom(); //30, 20]"
        -
          header: getRightTop():Point
          description: Right-top corner vector
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getRightTop(); //30, 10]"
        -
          header: getSize():Point
          description: Width and height as a vector
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getSize(); //20, 10]"
        -
          header: getWidth():Number
          description: Width of rectangle
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.getWidth(); // 20"
        -
          header: moveBy(point:Point):Void
          description: Moves rectangle by a vector
          example:
            - "var rectangle = new artjs.Rectangle(10, 10, 30, 20);"
            -
            - "rectangle.moveBy(new Point(-10, -10);"
            - "rectangle.toString(); //0, 0, 20, 10]"
routing:
  template: routing
selector:
  name: Selector
  package: artjs.dom
  description: Allows to easily traverse DOM.
  sections:
    -
      name: Methods
      members:
        -
          header: findAll(element:Element, selector:String):Array
          description: "Same as {{code('getElements')}} but with reversed arguments."
        -
          header: find(element:Element, selector:String):Element
          description: "Same as {{code('getElement')}} but with reversed arguments."
        -
          header: getAncestors(element:Element, ref:String = document):Array
          description: Returns {{code('Array')}} of Elements starting from {{param('element')}}'s parent all the way up to {{param('ref')}} element.
        -
          header: getElement(selector:String, element:Element):Array
          description: Returns element that matches selector.
        -
          header: getElementById(id:String):Element
          description: Returns Element by id.
        -
          header: getElementsByTagName(name:String):Array
          description: Returns array of Elements by tag name.
        -
          header: getElements(selector:String, element:Element):Array
          description: Returns all descendants that match the selector.
          more: Selector parameter must be a single selector without spaces
          example:
            - "var main = artjs.Selector.getElements('#main');"
            - "var titles = artjs.Selector.getElements('p.title', main);"
        -
          header: isDescendantOf(element:Element, root:Element):Boolean
          description: Returns true if element is descendant of root.
        -
          header: isSelfOrDescendantOf(element:Element, root:Element):Boolean
          description: "Same as {{code('isDescendantOf')}} but returns true also if element is the root itself."
        -
          header: parent(element:Element, selector:String):Element
          description: Returns first ancestor that matches the selector.
string:
  name: artjs.String
  package: artjs.utils
  description: Provides set of methods that operates on any String instance.
  sections:
    -
      name: Static methods
      members:
        -
          header: align(string:String, length:Number, char:String, left:Boolean):String
          desciption: Extends length of the {{param('string')}} to {{param('length')}} value by filling the gap with {{param('char')}} characters on the side determined by {{param('left')}} argument.
          example: 
            - "var string = 'color';"
            -
            - "artjs.String.align(string, 10, '-', true); // color-----"
        -
          header: isBlank(string:String):Boolean
          description: Returns true if {{param('string')}} is null or empty; false otherwise
          example:
            - "var string = 'quantum mechanics';"
            - "var emptyString = '      ';"
            - "var nullValue = null;"
            -
            - "artjs.String.isBlank(string); // false"
            -
            - "artjs.String.isBlank(emptyString); // true"
            -
            - "artjs.String.isBlank(nullValue); // true"
        -
          header: capitalize(string:String):String
          description: Upcase each word in {{param('string')}}
          example:
            - "var string = 'advanced quantum mechanics';"
            -
            - "artjs.String.capitalize(string); // Advanced Quantum Mechanics"
        -
          header: countPattern(string:String, pattern:String):Number
          description: Returns number of {{param('pattern')}} occurences in {{param('string')}}
          example:
            - "var string = 'advanced quantum mechanics';"
            -
            - "artjs.String.countPattern(string, 'an'); // 3"
        -
          header: isEmpty(string:String):Boolean
          description: Returns true if {{param('string')}} is empty; false otherwise
          example:
            - "var string = 'quantum mechanics';"
            - "var emptyString = '      ';"
            -
            - "artjs.String.isEmpty(string); // false"
            -
            - "artjs.String.isEmpty(emptyString); // true"
        -
          header: first(string:String):String
          description: Returns first letter of a {{param('string')}}
          example:
            - "var string = 'quantum mechanics';"
            -
            - "artjs.String.first(string); // q"
        -
          header: formatPrice(value:Number):String
          description: Returns price formatted string
          example:
            - "var price = 3.7;"
            -
            - "artjs.String.formatPrice(price); // 3.70"
        -
          header: getMultiPattern(pattern:String, n:Number):String
          description: Returns string containing of {{param('pattern')}} concatenated {{param('n')}} times
          example:
            - "var string = 'yes, ';"
            -
            - "artjs.String.getMultiPattern(string, 3); // yes, yes, yes," 
        -
          header: last(string:String):String
          description: Returns last letter of a {{param('string')}}
          example:
            - "var string = 'quantum mechanics';"
            -
            - "artjs.String.last(string); // s"
        -
          header: nullifyEmpty(string:String):Object
          description: Returns null if {{param('string')}} is empty; {{param('string')}} otherwise
          example:
            - "var string = 'quantum mechanics';"
            - "var emptyString = '      ';"
            -
            - "artjs.String.nullifyEmpty(string); // quantum mechanics"
            -
            - "artjs.String.nullifyEmpty(emptyString); // null"
        -
          header: singularOrPlural(string:String, n:Number):String
          description: Returns plural version of {{param('string')}} if {{param('n')}} is other than 1
          example:
            - "var string = 'chicken';"
            -
            - "artjs.String.singularOrPlural(string, 1); // chicken"
            -
            - "artjs.String.singularOrPlural(string, 5); // chickens"
        -
          header: strip(string:String):String
          description: Removes whitespaces from {{param('string')}} and returns the result
          example:
            - "var string = 'quantum mechanics';"
            -
            - "artjs.String.strip(string); // quantummechanics"
        -
          header: sub(string:String, start:Number, end:Number):String
          description: Periodic version of String.substring()
          example:
            - "var string = 'quantum mechanics';"
            -
            - "artjs.String.sub(string, -2, 4); // csquan"
        -
          header: toJson(string:String):Object
          description: Converts {{param('string')}} JSON format to Object
          example:
            - "var string = '{id: 5, name: 'Mike'}';"
            -
            - "artjs.String.toJson(string); // {id: 5, name: 'Mike'}"
        -
          header: toS(string:String):String
          description: Returns empty string if {{param('string')}} is null; {{param('string')}} otherwise
          example:
            - "var string = 'quantum mechanics';"
            - "var nullValue = null;"
            -
            - "artjs.String.toS(string); // quantum mechanics"
            - "artjs.String.toS(nullValue); // (empty string)"
        -
          header: trim(string:String):String
          description: Remove all the whitespaces from the begining and the end of the {{param('string')}}
          example:
            - "var string = '    quantum mechanics  ';"
            -
            - "artjs.String.trim(string); // quantum mechanics"
        -
          header: truncate(string:String, n:Number, end:String = '...'):String
          description: Truncates {{param('string')}} to length {{param('n')}} and appends {{param('end')}}
          example:
            - "var string = 'quantum field theory';"
            -
            - "artjs.String.truncate(string, 8); // quantum..."
template:
  template: template
template_view:
  template: template_view
testing:
  template: testing
timeline:
  name: Timeline
  package: artjs.events
  description: Useful for measuring time intervals between events.
  sections:
    -
      name: Constructor
      members:
        -
          header: Timeline()
    -
      name: Methods
      members:
        -
          header: mark():Integer
          description: Marks the point on the timeline. Returns miliseconds since recent mark.
timeout:
  name: Timeout
  package: artjs.events
  description: Allows you to perform action with delay.
  sections:
    -
      name: Constructor
      members:
        -
          header: Timeout(delay:Number)
          params:
            delay: Delay in miliseconds before onComplete event is triggered.
    -
      name: Methods
      members:
        -
          header: start():Void
          description: Initializes the timeout. After amount of time specified in constructor the onComplete will be triggered.
        -
          header: getDelay():Number
          description: Returns delay specified in constructor.
        -
          header: isRunning():Boolean
          description: Returns true if timeout has been started but not yet finished.
      name: Events
      members:
        -
          header: onComplete(delegate:Delegate):Void
          description: Triggered when timeout finishes.
      name: Static methods
      members:
        -
          header: fire(delegate:Delegate, delay:Number):Timeout
          description: Instantiates Timeout and registers handler at once.
toggler:
  name: Toggler
  package: artjs.utils
  description: Defines a single element container. Whenever you put a new one the old pops out and appropriate events are triggered
  sections:
    -
      name: Constructor
      members:
        -
          header: Toggler(unique:Boolean = nil)
          params:
            unique: if true, events won't be triggered when toggling to the same object.
    -
      name: Properties
      members:
        -
          header: unique:Boolean
          description: The same as in constructor.
        -
          header: current:Object
          description: Returns current element.
    -
      name: Methods
      members:
        -
          header: toggle(element:Object):Void
          description: Puts a new object into container. The previous one pops out.
    -
      name: Events
      members:
        -
          header: onActivate()
          description: Triggered when new element has been put into the container.
        -
          header: onDeactivate()
          description: Triggered when element pops out from the container.
template-helpers:
  name: artjs.TemplateHelpers
  package: artjs.template
  description: This class can be used both in regular JS and in html templates. Defines set of methods that allows to generate dynamic content.
  sections:
    -
      name: Static methods
      members:
        -
          header: render(templateId:String, scope:Object):String
          description: Returns content on template identified by {{param('templateId')}} with template data substituted with data from {{param('scope')}} object.
          example:
            - "/*"
            - " * Suppose that there is a template named myTemplate.html with content:"
            - " * <p class=\"title\">{{title}}</p>"
            - " */"
            -
            - "var content = artjs.TemplateHelpers.render('myTemplate', {title: 'Hello'});"
            -
            - "// <p class=\"title\">Hello</p>" 
          more: To read more about templates, see {{linkTo('artjs.TemplateLibrary', 'template-library')}} section.
        -
          header: renderInto(element:Element, templateId:String, scope:Object):Void
          description: Does the same job as {{code('render()')}} but instead of returning a content, puts it directly to {{param('element')}}'s body.
        -
          header: renderCollection(templateId:String, collection:Array):String
          description: For each scope in {{param('collection')}} renders a template and returns the result.
          example:
            - "// myTemplate.html: <li>{{id}}</li>"
            - "var collection = [{id: 1}, {id: 2}];"
            - "var content = artjs.TemplateHelpers.renderCollection('myTemplate', collection);"
            -
            - "// <li>1</li><li>2</li>"
        -
          header: renderIf(value:Object, method:String):String
          description: Returns result of {{param('method')}} call on a Helper but only if <span>value</span> is present. Otherwise returns empty string. It's useful when you have your custom helper methods and they may be used in templates for null values.
          example:
            - "// Suppose you have following custom helper method:"
            - "// renderDescription: function(v)"
            - "//   return $B('p', null, v).toString();"
            - "// }"
            - "var value;"
            -
            - "value = 'Hi there!';"
            - "renderIf(value, 'renderDescription'); // '<p>Hi There!</p>'"
            -
            - "value = null;"
            - "renderIf(value, 'renderDescription'); // ''"
        -
          header: register(name:String, method:Function):Void
          description: Allows you to register custom helper methods that can be used within templates.
          example:
            - "register('renderDescription', function(v) {"
            - "  return artjs.$B('p',className: 'description'}, v).toString();"
            - "});"
            - "// in the template:"
            - "{{renderDescription('Hello artjs!')}}"
            - "// <p class=\"description\">Hello artjs!</p>"
        -
          header: registerAll(helpers:Object):Void
          description: Allows you to register set of helper methods that can be used within templates at once.
          example:
            - "registerAll({"
            - "  renderDescription: function(v) {"
            - "    return artjs.$B('p',className: 'description'}, v).toString();"
            - "  }"
            -
            - "  renderTitle: function(v)"
            - "    return artjs.$B('h1',className: 'title'}, v).toString();"
            - "  }"
            - "});"
            - "// in the template:"
            - "{{renderTitle('Welcome')}}{{renderDescription('Hello artjs!')}}"
            - "// <h1 class=\"title\">Welcome</h1><p class=\"description\">Hello artjs!</p>"
template-library:
  name: artjs.TemplateLibrary
  package: artjs.template
  description: Loads template files to your application using AJAX. Triggers {{code('artjs.onLibraryLoad')}} upon completion.
  sections:
    -
      name: Static properties
      members:
        -
          header: config:Object
          description: 
            - "Consists of two configuration parameters:"
            - "PATH - remote path to template directory"
            - "TEMPLATES - list of template files to be loaded (without extension as {{artjs()}} assumes .html format)"
          example:
            - "artjs.TemplateLibrary.config = {"
            - "  PATH: 'templates',"
            - "  TEMPLATES: ['doc', 'member', 'section', 'ga']"
            - "};"
transition-blind:
  name: Blind
  package: artjs.transition
  description: Allows to apply "Blind" visual effect.
  sections:
    -
      name: Static methods
      members:
        -
          header: blindTo(e:Element, value:Integer, duration:Number = 0.4, type:String = EASE_IN_OUT, delay:Number = 0):Void
          description: Smoothly changes the height of element to that given by {{param('value')}}.
        -
          header: blindToggle(e:Element, value:Integer, duration:Number = 0.4, type:String = EASE_IN_OUT, delay:Number = 0):Void
          description: Does the same as blindTo but only if current element height is zero. Otherwise it makes transition to zero height.
      name: Static properties
      members:
        -
          header: EASE_IN_OUT:String
          description: Used for defining blind effect type.
utils:
  template: utils
view:
  template: view
